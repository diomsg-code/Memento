name: Publish 'Memento'
run-name: Publish 'Memento' (${{ github.event.inputs.releaseType }})

on:
  workflow_dispatch:
    inputs:
      releaseType:
        description: 'Art des Releases'
        required: true
        default: 'release'
        type: choice
        options:
          - Release
          - Alpha
      newVersionTag:
        description: 'Optional: neuer Tag'
        required: false
      oldVersionTag:
        description: 'Optional: alter Tag'
        required: false
      buildRetail:
        description: 'Retail-Version'
        required: false
        default: true
        type: boolean
      buildClassic:
        description: 'Classic-Version'
        required: false
        default: true
        type: boolean
      buildCata:
        description: 'Cata-Version'
        required: false
        default: true
        type: boolean
      createChangelog:
        description: 'vollstÃ¤ndiges Changelog'
        required: false
        default: true
        type: boolean

permissions:
  contents: write

jobs:
  build-changelog-github:
    name: Build Changelog and Github
    runs-on: ubuntu-latest
    env:
      GITHUB_OAUTH: ${{ secrets.G_TOKEN }}
    outputs:
      last-release-tag: ${{ steps.get-last-release-tag.outputs.tag }}
      new-tag: ${{ steps.set-new-tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get last release tag
        id: get-last-release-tag
        run: |
          input="${{ github.event.inputs.oldVersionTag }}"

          if [[ -n "$input" ]]; then
            echo "tag=$input" >> $GITHUB_OUTPUT
          else
            git fetch --tags
            last_release_tag=$(git tag --sort=-creatordate | grep '^v[0-9]\+$' | head -n 1 || echo "v0")
            echo "tag=$last_release_tag" >> $GITHUB_OUTPUT
          fi
      - name: Get last tag
        id: get-last-tag
        run: |
          git fetch --tags
          last_tag=$(git tag --sort=-creatordate | grep '^v[0-9]' | head -n 1 || echo "v0")
          echo "tag=$last_tag" >> $GITHUB_OUTPUT

      - name: Set new tag
        id: set-new-tag
        run: |
          input="${{ github.event.inputs.newVersionTag }}"
          type="${{ github.event.inputs.releaseType }}"
          last_tag="${{ steps.get-last-tag.outputs.tag }}"

          if [[ -n "$input" ]]; then
            echo "tag=$input" >> $GITHUB_OUTPUT
            exit 0
          fi

          base=${last_tag%%-*}
          suffix=${last_tag#"$base"}
          base_num=${base#"v"}

          if [[ "$suffix" =~ ^-alpha\.[0-9]+$ ]]; then
            alpha_num=$(echo "$suffix" | cut -d. -f2)
          fi

          if [[ "$suffix" =~ ^-alpha\.[0-9]+$ && "$type" == "Alpha" ]]; then
            next_alpha=$((alpha_num + 1))
            new_tag="v${base_num}-alpha.${next_alpha}"
          elif [[ "$suffix" =~ ^-alpha\.[0-9]+$ && "$type" == "Release" ]]; then
            new_tag="v${base_num}"
          elif [[ -z "$suffix" && "$type" == "Release" ]]; then
            next_base=$((base_num + 1))
            new_tag="v${next_base}"
          elif [[ -z "$suffix" && "$type" == "Alpha" ]]; then
            next_base=$((base_num + 1))
            new_tag="v${next_base}-alpha.1"
          else
            exit 1
          fi

          echo "tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Generate changelog section with version header
        if: github.event.inputs.createChangelog == 'true'
        run: |
          version="${{ steps.set-new-tag.outputs.tag }}"
          date=$(date -u +"%Y-%m-%d")

          echo "**${version} (${date})**" > tmp_changelog.md

          awk '
            /^### \[.*\]/ { if (in_section) exit; in_section = 1; next }
            in_section && /^### \[/ { exit }
            in_section && /^\-/ { print }
          ' CHANGELOG.md >> tmp_changelog.md

          echo "" >> tmp_changelog.md

      - name: Add new block to FULL-CHANGELOG.md
        if: github.event.inputs.createChangelog == 'true'
        run: |
            touch FULL-CHANGELOG.md
            cat tmp_changelog.md FULL-CHANGELOG.md > FULL-CHANGELOG.new.md
            mv FULL-CHANGELOG.new.md FULL-CHANGELOG.md

      - name: Commit FULL-CHANGELOG.md
        if: github.event.inputs.createChangelog == 'true'
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add FULL-CHANGELOG.md
          git commit -m "Update FULL-CHANGELOG.md for ${{ steps.set-new-tag.outputs.tag }}"
          git push https://x-access-token:${{ secrets.G_TOKEN }}@github.com/${{ github.repository }} HEAD:main

      - name: Get the latest version of main from the repository
        if: github.event.inputs.createChangelog == 'true'
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git fetch origin main
          git reset --hard origin/main

      - name: Replace @old-project-version@ in CHANGELOG.md
        run: |
          last_release_tag=${{ steps.get-last-release-tag.outputs.tag }}
          sed -i "s/@old-project-version@/$last_release_tag/g" CHANGELOG.md

      - name: Create and push tag
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git tag ${{ steps.set-new-tag.outputs.tag }}
          git push https://x-access-token:${{ secrets.G_TOKEN }}@github.com/${{ github.repository }} refs/tags/${{ steps.set-new-tag.outputs.tag }}

      - name: Package and publish for Github (Alpha)
        if: github.event.inputs.releaseType == 'Alpha' 
        uses: BigWigsMods/packager@v2

      - name: Package and publish for Github (Release)
        if: github.event.inputs.releaseType != 'Alpha' 
        uses: BigWigsMods/packager@v2

  build-retail:
    name: Build Retail
    if: github.event.inputs.buildRetail == 'true'
    needs: 
      - build-changelog-github
    runs-on: ubuntu-latest
    env:
        CF_API_KEY: ${{ secrets.CF_API_KEY }}
        WAGO_API_TOKEN: ${{ secrets.WAGO_API_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get the latest version of main from the repository
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git fetch origin main
          git reset --hard origin/main

      - name: Prepare TOC for Retail
        run: |
          rm -f Memento_Vanilla.toc Memento_Cata.toc
          mv Memento_Mainline.toc MyAddon.toc

      - name: Replace @old-project-version@ in CHANGELOG.md
        run: |
          last_release_tag=${{ needs.build-changelog-github.outputs.last-release-tag }}
          sed -i "s/@old-project-version@/$last_release_tag/g" CHANGELOG.md

      - name: Get current tags
        run: |
          git fetch --tags

      - name: Package and publish for CourseForge and Wago (Alpha)
        if: github.event.inputs.releaseType == 'Alpha'    
        uses: BigWigsMods/packager@v2
        with:
          args: -a ${{ vars.WAGO_ID }} -g retail -m .pkgmeta_mainline

      - name: Package and publish for CourseForge and Wago (Release)
        if: github.event.inputs.releaseType != 'Alpha'  
        uses: BigWigsMods/packager@v2
        with:
          args: -a ${{ vars.WAGO_ID }} -g retail -m .pkgmeta_mainline


  build-classic:
    name: Build Classic
    if: github.event.inputs.buildClassic == 'true'
    needs: 
      - build-changelog-github
    runs-on: ubuntu-latest
    env:
        CF_API_KEY: ${{ secrets.CF_API_KEY }}
        WAGO_API_TOKEN: ${{ secrets.WAGO_API_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get the latest version of main from the repository
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git fetch origin main
          git reset --hard origin/main

      - name: Prepare TOC for Classic
        run: |
          rm -f Memento_Mainline.toc Memento_Cata.toc
          mv Memento_Vanilla.toc MyAddon.toc

      - name: Replace @old-project-version@ in CHANGELOG.md
        run: |
          last_release_tag=${{ needs.build-changelog-github.outputs.last-release-tag }}
          sed -i "s/@old-project-version@/$last_release_tag/g" CHANGELOG.md

      - name: Get current tags
        run: |
          git fetch --tags

      - name: Package and publish for CourseForge and Wago (Alpha)
        if: github.event.inputs.releaseType == 'Alpha'    
        uses: BigWigsMods/packager@v2
        with:
          args: -a ${{ vars.WAGO_ID }} -g classic -m .pkgmeta_classic

      - name: Package and publish for CourseForge and Wago (Release)
        if: github.event.inputs.releaseType != 'Alpha'  
        uses: BigWigsMods/packager@v2
        with:
          args: -a ${{ vars.WAGO_ID }} -g classic -m .pkgmeta_classic

  build-cata:
    name: Build Cata
    if: github.event.inputs.buildCata == 'true'
    needs: 
      - build-changelog-github
    runs-on: ubuntu-latest
    env:
        CF_API_KEY: ${{ secrets.CF_API_KEY }}
        WAGO_API_TOKEN: ${{ secrets.WAGO_API_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get the latest version of main from the repository
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git fetch origin main
          git reset --hard origin/main

      - name: Prepare TOC for Cata
        run: |
          rm -f Memento_Mainline.toc Memento_Vanilla.toc
          mv Memento_Cata.toc MyAddon.toc

      - name: Replace @old-project-version@ in CHANGELOG.md
        run: |
          last_release_tag=${{ needs.build-changelog-github.outputs.last-release-tag }}
          sed -i "s/@old-project-version@/$last_release_tag/g" CHANGELOG.md

      - name: Get current tags
        run: |
          git fetch --tags

      - name: Package and publish for CourseForge and Wago (Alpha)
        if: github.event.inputs.releaseType == 'Alpha'    
        uses: BigWigsMods/packager@v2
        with:
          args: -a ${{ vars.WAGO_ID }} -g cata -m .pkgmeta_cata

      - name: Package and publish for CourseForge and Wago (Release)
        if: github.event.inputs.releaseType != 'Alpha'  
        uses: BigWigsMods/packager@v2
        with:
          args: -a ${{ vars.WAGO_ID }} -g cata -m .pkgmeta_cata